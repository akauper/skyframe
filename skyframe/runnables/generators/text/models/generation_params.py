from typing import Optional, Union, Dict, Literal, List

from pydantic import Field

from skyframe.models.base import BaseParams
from skyframe.utils import logger

OpenAiModelType = Union[
    str,
    Literal[
        "gpt-4o",
        "gpt-4o-2024-05-13",
        "gpt-3.5-turbo-0125",
        "gpt-3.5-turbo-instruct",
        "gpt-4-turbo",
        "gpt-4",
        "gpt-4-32k",
    ],
]

AnthropicModelType = Union[
    str,
    Literal[
        "claude-3-5-sonnet-20240620",
        "claude-3-opus-20240229",
        "claude-3-sonnet-20240229",
        "claude-3-haiku-20240307",
        "claude-2.1",
        "claude-2.0",
        "claude-instant-1.2",
    ],
]

OpenaiResponseFormat = Literal['text', 'json_object']


class TextGenerationParams(BaseParams):
    """
    Parameters for generating text from a LLM Service.
    """

    # model: Optional[Union[str, OpenAiModelType, AnthropicModelType]] = Field(default='gpt-4-turbo-preview')
    model: Optional[Union[str, OpenAiModelType, AnthropicModelType]] = Field(default=None)
    """ The name of the LLM model to use for generation. """

    frequency_penalty: Optional[float] = Field(default=None, ge=-2, le=2)  # OpenAI defaults to 0
    """ Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the
    text so far, decreasing the model's likelihood to repeat the same line verbatim. """

    logit_bias: Optional[Dict[str, int]] = Field(default=None, ge=-100, le=100)
    """ Accepts a JSON object that maps tokens (specified by their token ID in the tokenizer)
    to an associated bias value from -100 to 100. Mathematically, the bias is added to the logits generated by the
    model prior to sampling. The exact effect will vary per model, but values between -1 and 1 should decrease or
    increase likelihood of selection; values like -100 or 100 should result in a ban or exclusive selection of
    the relevant token. """

    logprobs: Optional[bool] = Field(default=None)  # OpenAI defaults to False
    """ Whether to return log probabilities of the output tokens or not. If true, returns the log probabilities of
    each output token returned in the content of message. """

    top_logprobs: Optional[int] = Field(default=None, ge=0, le=5)
    """ An integer between 0 and 5 specifying the number of most likely tokens to return at each token position,
    each with an associated log probability. logprobs must be set to true if this parameter is used. """

    max_tokens: Optional[int] = Field(default=None)
    """ The maximum number of tokens that can be generated in the chat completion.
    The maximum number of tokens that can be generated in the chat completion. """

    n: Optional[int] = Field(default=None)  # OpenAI defaults to 1
    """ How many chat completion choices to generate for each input message. """

    presence_penalty: Optional[float] = Field(default=None, ge=-2, le=2)  # OpenAI defaults to 0
    """ Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the
    text so far, increasing the model's likelihood to talk about new topics. """

    response_format: Optional[OpenaiResponseFormat] = Field(default=None)  # OpenAI defaults to 'text'
    """ An object specifying the format that the model must output.
    Setting to { "type": "json_object" } enables JSON mode, which guarantees the message the model generates is valid JSON. """

    seed: Optional[int] = Field(default=None)
    """ This feature is in Beta. If specified, our system will make a best effort to sample deterministically, such
    that repeated requests with the same seed and parameters should return the same result.
    Determinism is not guaranteed, and you should refer to the system_fingerprint response parameter to
    monitor changes in the backend. """

    stop: Union[Optional[str], List[str]] = Field(default=None)
    """ Up to 4 sequences where the API will stop generating further tokens. """

    stream: Optional[bool] = Field(default=False)
    """ Whether to stream back partial messages as they are completed. """

    temperature: Optional[float] = Field(default=None, ge=0, le=2)  # OpenAI defaults to 1
    """ What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random,
    while lower values like 0.2 will make it more focused and deterministic. """

    top_p: Optional[float] = Field(default=None, ge=0, le=1)  # OpenAI defaults to 1
    """ An alternative to sampling with temperature, called nucleus sampling, where the model considers the results
    of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass
    are considered."""

    top_k: Optional[int] = Field(default=None, ge=0)  # OpenAI does not use this parameter
    """Only sample from the top K options for each subsequent token.

    Used to remove "long tail" low probability responses.
    [Learn more technical details here](https://towardsdatascience.com/how-to-sample-from-language-models-682bceb97277).

    Recommended for advanced use cases only. You usually only need to use
    `temperature`.
    """

    user: Optional[str] = Field(default=None)
    """ The user name to use for the request. """

    def merge(self, other: 'TextGenerationParams') -> 'TextGenerationParams':
        """
        Merges another TextGenerationParams into this one.
        All values in the 'other' TextGenerationParams will overwrite the values in this one except for the 'stop'
        attribute, which will be added.

        :param other: The other TextGenerationParams.
        :return: A new TextGenerationParams object.
        """

        new_model = self.model_copy()

        if other is None:
            return new_model

        for k, v in other.model_dump(exclude_unset=True, exclude_defaults=True, exclude_none=True).items():
            if k == 'stop':
                new_model.add_stop(v)
            else:
                setattr(new_model, k, v)

        return new_model

    def add_stop(self, stop: Union[str, List[str]]):
        """
        Adds a stop sequence to the model.
        :param stop: The stop sequence to add.
        """
        if self.stop is not None:
            if isinstance(self.stop, list):
                if isinstance(stop, list):
                    self.stop += stop
                else:
                    self.stop.append(stop)
            else:
                if isinstance(stop, list):
                    self.stop = [self.stop] + stop
                else:
                    self.stop = [self.stop, stop]
        else:
            self.stop = stop

        if len(self.stop) > 4:
            self.stop = self.stop[:4]
            logger.warning(f'Only 4 stop sequences are allowed. The first 4 sequences will be used: {self.stop}')

